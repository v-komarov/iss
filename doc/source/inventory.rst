.. contents:: Оглавление
    :depth: 3



Инвентори
=========


Модели (схемы)
--------------

Модель устройств
~~~~~~~~~~~~~~~~


Обработка и хранение данных по оборудованию основана на модели (схемы) данных.

Схема храниться в справочнике devices_scheme в виде описания структуры данных формат json

Поля структуры json
"""""""""""""""""""

#. **model_name** - Название модели оборудования - совпадает с полем **name** справочника **devices_scheme**
#. **properties** - Список допустимых атрибутов характерных для данного model_name
    #. **mac** - MAС адрес шасси
    #. **subunit19** - высота устройства или стойки
    #. **Добавляется по необходимости**
#. **slots_number** - число занимаемых слотов оборудованием (для стоек 1unit - 1слот)
#. **ports** - Словарь портов в формате json с полями:
    #. **Номер порта** - "1","2","3"...
    #. **Словарь данных**:
        #. **type** - Тип порта , допустимые к использованию типы портов хранятся в таблице **localdicts.ports**
        #. **name** - Название порта с учетом специфики названий портов данного типа оборудования
#. **slots** - Словарь слотов в формате json с полями:
    #. **Номер слота** - "1","2","3"...
    #. **Словарь данных**:
        #. **type** - Тип слота , допустимые к использованию типы слотов хранятся в таблице **localdicts.slots**
        #. **group** - номер группы слотов
        #. **group_name** - название группы слотов
#. **combo** - Словарь комбо портов:
    #. **Номер порта** - "1","2","3"...
        #. **Словарь портов и слотов**:
            #. **port** - словарь:
                #. **type** - тип порта
            #. **slot** - словарь:
                #. **type** - тип слота
                #. **group** - номер группы слотов
                #. **group_name** - название группы слотов
#. **allowed_parrents** - Список допустимых типов слотов (**localdicts.slots**), куда можно включить это оборудование
#. **comment** - Текстовый коментарий



Пример

 ::

    {
        'model_name':'DES-1210-10/ME',
        'properties':['mac','subunit19','hwrev'],
        'slots_number':1,

        u'ports': {
        "1":{'type':'10/100 BASE-TX'},
        "2":{'type':'10/100 BASE-TX'},
        "3":{'type':'10/100 BASE-TX'},
        "4":{'type':'10/100 BASE-TX'},
        "5":{'type':'10/100 BASE-TX'},
        "6":{'type':'10/100 BASE-TX'},
        "7":{'type':'10/100 BASE-TX'},
        "8":{'type':'10/100 BASE-TX'}
        },

        'combo':{
        "9":{
        'port':{'type':'10/100/1000BASE-T'},
        'slot':{'type':'100/1000 SFP'}
        },
        },
        'allowed_parrents':['subunit19'],
        'slots':{},
        'comment':''
    }




Модель логических интерфейсов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Поля модели
"""""""""""

#. **name** - название модели
#. **ne** - идентификатор сетевого элемента (для связи сетевого элемента и логического элемента - один ко многим)

Поля структуры json
"""""""""""""""""""

#. **interfaces** допустимые типы логического интерфейса
    #. **req** True/False - флаг необходимости связки с физическим интерфейсом
#. **comment** - коментарий

Пример:

 ::

    {
        'interfaces':[
            'ilo':{"req":True },
            'layer3sub':{"req":False },
            'layer3':{"req":True },
            'eth_access':{"req":False }
        ],
        'comment':'бла бла бла'
    }


Связь моделей
-------------

#. Сущности, созданные на основе **модели устройств** имеют связи класса **многие ко многим** с сущностями, созданными на основе модели **сетевых элементов**
#. Сущности на основе **логических интерфейсов** могут иметь связи с сущностями **порты** как состовной части сущностей на основе **модели устройств**

